#include <iostream>
#include <string>
using namespace std;

template <class T>
struct Node {
	T data;
	Node<T>* next;
	Node() {
		next = NULL;
	}
	Node(T data1, Node<T>* lnext) :data(data1), next(lnext) {	}
};

template <class T>
class Stack {
protected:
	Node<T>* top;
	int n;         //  链式栈中的元素数目
public:
	Stack() {
		top = NULL;
		n = 0;
	}
	bool empty() {
		if (top == NULL)
			return 1;
		else
			return 0;
	}
	void push(T c) {
		Node<T>* f = new Node<T>(c, top);
		top = f;
		n++;
	}
	T pop() {
		T c;
		Node<T>* p = top;
		if (!empty()) {
			c = p->data;
			top = top->next;
			delete p;
			n--;
			return c;
		}
		else
		    return NULL;
	}
	T getelem() {
		if (!this->empty())
			return top->data;
		else {
			cout << "此栈为空栈！" << endl;
			return 0;
		}
	}
	void  complement_bracket(string st){
		Stack& s1 = *this;
		for(auto c: st){
			string sc(1,c);
		    if(sc != ")")
		        s1.push(sc);
		    else{
		    	string st1 = s1.pop();
		    	string st_operator = s1.pop();
		    	string st2 = s1.pop();
		    	s1.push("(" + st2 + st_operator + st1 + ")");
			}
		}
		cout << s1.pop() << endl;
	}
};
	int main() {
		Stack<string> s;
		string s1;
		cout << "请输入：" << endl;
		cin >> s1;
		cout << "补全括号后如下:" << endl;
		s.complement_bracket(s1);
		return 0; 
	}
