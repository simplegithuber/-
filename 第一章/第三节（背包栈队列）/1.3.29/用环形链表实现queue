#include <iostream>
#include <string>
using namespace std;

template <class T>
struct Node {
	T data;
	Node<T>* next;
	Node() :next(NULL) { }
	Node(T a, Node<T>* lnext) :data(a), next(lnext) { }
};

template <class T>
class List_Queue {
protected:
	int length;
	Node<T>* front;
	Node<T>* rear;
public:
	List_Queue() :length(0), front(new Node<T>), rear(front) {
		front->next = rear;
	}
	~List_Queue() {
		Node<T>* p = front;
		Node<T>* q = p->next;
		while (q != front) {
			p->next = q->next;
			delete q;
			q = p->next;
		}
		delete front;
	}
	List_Queue(List_Queue& li) {
		length = li.length;
		front = new Node<T>;
		Node<T>* p = li.front->next;
		while (p != front) {
			insertelem(p->data);
			p = p->next;
		}
	}
	bool isempty() {
		if (length == 0)
			return 1;
		else
			return 0;
	}
	int getlength() {
		return length;
	}
	void creatList_Queue(T t[], int n) {
		for (int i = 0; i < n; i++) {
			/*			Node<T>* p = front;
						while(p->next != front)
							p = p->next;
						p = rear = new Node<T>(t[i], front);
						length++;*/
			insertelem(t[i]);
		}
	}
	void insertelem(T e) {
		Node<T>* p = front;
		while(p->next != front)
			p = p->next;
		p->next = rear = new Node<T>(e, front);
		length++;
	}
	bool deleteelem(T e) {
		int n = 0;
		Node<T>* p = front;
		Node<T>* q = p->next;
		while (q != front) {
			if (q->data == e) {
				p->next = q->next;
				delete q;
				n = 1;
				length--;
				q = p->next;
			}
			else {
				p = p->next;
				q = q->next;
			}
		}
		if (n == 1) {
			cout << "删除成功！" << endl;
			return 1;
		}
		else {
			cout << "未找到要删除的元素，删除失败！" << endl;
			return 0;
		}
	}
	void iv_put() {  // 倒序输出 
		Node<T>* p = front->next;
		while (p != front) {
			cout << p->data << " ";
			p = p->next;
		}
		cout << endl;
	}
	void po_put() {  //  正序输出 
		T a[length];
		int i = 0;
		Node<T>* p = front->next;
		while (p != front) {
			a[i++] = p->data;
			p = p->next;
		}
		for (int i = length - 1; i >= 0; i--)
			cout << a[i] << " ";
		cout << endl;
	}
};
int main() {
	List_Queue<int> li1;
	int ab[5]{ 10,5,65,12,66 };
	li1.creatList_Queue(ab, 5);
	li1.iv_put();
	li1.deleteelem(30);
	li1.iv_put();
	return 0;
}
